
; The first block of this is loaded by the IPL from the SPI Flash chip into the uppermost
; 256 bytes of RAM in bank zero, where the CPU boots from.
; This boot block then copies the last 2k of this to $8800 on bank0, and jumps
; to it to execute it.
; 
; Note that this relies on the Flash ROM containing the
; PET ROM images to copy from in this order:
;
; $00000  IPL code (256 byte) - this code
; $00800  Boot code (2k)
; $01000  @MON (4k copied to $a000)
; $02000  charrom (8k)
; $04000  BASIC2 + EDIT2 + KERNEL2 (16k)
; $08000  EDIT8 (extended)
; $09000  BASIC4 + EDIT4(extended) + KERNAL4 (20k)
; $0e000  EDIT4 (extended, C64 kbd)
; $0f000  EDIT8 (extended, C64 kbd)
; $10000  EDIT4 (orig)
; $11000  EDIT8 (orig)
; $12000  EDIT4 (bare, C64 kbd)
; $13000  EDIT8 (bare, C64 kbd)

;VBANK	=$080000

SPICTRL	=$e808
SPIDATA	=$e809
SPIPEEK	=$e80a

;VIA	=$e840
;VIA_PCR	=12

;CRTC	=$e880

RUNADDR	=$9000

;shift	=$87ff
;char	=$87fe

;VCTRL   =$e800
;MCTRL   =$e801
BANK    =$e802
;SPEED   =$e803
;R8296   =$fff0

;BOOTCOL	=$15	; dark grey background, light green text
;BOOTCOL	=$1f	; dark grey background, white text
;BOOTCOL	=$50	; black text on light green background
;BOOTCOL	=$05	; black background with light green text

	*=$ff00
vreset	.(
#if 0
	; test loop for hardware debugging. E.g. Trigger on A2
	nop
	nop
	nop
	jmp vreset
#else
	; init the CPU
	sei
	cld
	ldx #$ff
	txs

	; switch to native mode
	clc
	xce

	; set ac and index to single byte ...
	sep #%00110000
	; ... and tell the assembler about it
	.as
	.xs

	; prime high byte of AC with zero
	lda #0
	xba

	; copy over boot code to fast RAM (2nd 512k)
	ldx #0
bootl	lda $ff00,x
	sta $08ff00,x
	inx
	bne bootl
	; enable fast RAM
	lda #0
	sta $e801

	; set X/Y registers to 16 bit ...
	rep #%00010000
	; ... and tell the assembler about it
	.xl

	lda #$20	; for the PET default CRTC base address of $1000
	sta BANK	; $e802

spiread
	; -----------------------
	; copy the boot code to RUNADDR
	lda #1
	sta SPICTRL	; enable Flash
	lda #3
	sta SPIDATA	; READ command
	lda #0
	sta SPIDATA	; bits 23-16
	lda #>$0800	
	sta SPIDATA	; bits 15-8
	lda #<$0800
	sta SPIDATA	; bits 7-0

	lda SPIDATA	; trigger shift in of first byte into SR (value read is still invalid)

	ldx #0
readloop
	lda SPIDATA	; read byte
	sta RUNADDR,x
	inx
	cpx #$0800
	bne readloop
	
	lda #0
	sta SPICTRL	; deselect Flash

	; set ac and index to single byte ...
	sep #%00110000
	; ... and tell the assembler about it
	.as
	.xs

	jmp RUNADDR
#endif

vcop
vbrk
vabort
vnmi
virq
	rti

        .dsb $fff4-*,$f0

        .word vcop
        .word vbrk
        .word vabort
        .word vnmi
        .word vreset
        .word virq

	.)



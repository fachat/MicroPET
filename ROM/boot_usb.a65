
	.(

lock	=$0700ff	; last byte in zeropage in bank 7/block 14
VCOUNT	=$0700fe
tmp	=$0700fd

MAP_USB	=USBBLK
MAP_BAS	=0
MAPREG	=BANK

USBBLK  =14             ; bank 7 value for BANK  
USBBASE =$1000                                   

driver_init     =USBBASE                                               
driver_poll     =USBBASE+3                                             

        ; -----------------------                                        
        ; copy over USB code to RAM                                      
        ; $1a000-$1bfff in flash img                                     
        ; copy to USBBASE                                                

	.xl
&setup_usb_xl                                                                         
        .(                                                               
        lda #MAP_USB 	; for the PET default VICCY base address of $1000 
        sta BANK        ; $e802                                           

        lda #$a0        ; page in flash                                  
        ldx #USBBASE    ; start in current bank                          
        ldy #$2000      ; transfer len                                   
        jsr flash2direct2_xl                                             

	sep #%00010000
	.xs

	ldy #romcompend-romcomp-1
l	lda romcomp,y
	sta $df00,y
	dey
	bpl l

	jsr usb_init
    	bcs nohw
       
	jsr usb_inst
 
        ; TODO:                                                          
        ; 2. init USB, bind into IRQ                                     
        ; 3. CLI                                                         
        ; 4. then use USB keyboard in boot menu                          
        ; 5. SEI                                                         
        ; 6. set ROMs                                                    
        ; 7. if USB option set, copy real bind companion to $df00        
        ; 8. enable USB interrupt handling                               
        ; 9. switch BANK back to 0 ($20)                                 
        ; 10. boot into ROM                                              
         
nohw                                                               
        lda #MAP_BAS
        sta BANK                                                         

	cli

	rep #%00010000
	.xl
	rts
        .)                                                               

	.xs                                                                         

romcomp	.(
	*=$df00
; called from outside                                              
&usb_init       jmp init        ; init the USB stack               
&usb_inst       jmp install     ; patch in USB interrupt into ROM  
&&usb_uninst    jmp uninstall   ; remove USB patch                 
; called from USB driver interrupt routine                         
&usb_pause      jmp pause       ;                                  
&usb_appendkey  jmp printc2                                        
	*=*-$df00+romcomp
	.)
romcompend

install	.(
	lda #<newirq
	sta $ffee	; 65816 native interrupt vector(!)
	lda #>newirq	; http://6502.org/tutorials/65c816interrupts.html#toc:interrupt_irq
	sta $ffef

	lda #0
	sta lock

	; once per screen interrupt (60Hz)
	; 
	; UltiPet could use VICCY, but uPET does not have this
	; So, we fall back to using PET VDRIVE input on PIA1 CB1
#if VICCY_IRQ
	lda #VCCY_RLINE_L		; rasterline counter
	sta VICCY+1
	lda #0
	sta VICCY+3	; set to zero
	sta VICCY+3
	lda #VCCY_IRQ_CTRL
	sta VICCY
	lda #1		; rasterline interrupt
	sta VICCY+1
#else
	lda #$3d	; enable VDRIVE interrupt
	sta PIA1+PIA_CRB
#endif

	rts
	.)

uninstall .(
	sei

#if VICCY_IRQ
	lda #VCCY_IRQ_CTRL
	sta VICCY
	lda #0
	sta VICCY+3	; disable rasterline interrupt
	lda #1
	sta VICCY+3	; reset rline int status
#else
	lda #$3c
	sta PIA1+PIA_CRB
#endif
	rts
	.)

	; is entered in MAP_USB, .xs, .as
init    .(
        php                         
        sei                         

        lda #<-1                    
        sta lock                    
                                    
        jsr driver_init             
                                    
        bcs locked                  
        plp                         
        clc                         
	rts

locked  plp                         
        sec                         
        rts                         
	.)

	; interrupt state saving according to 
	; http://6502.org/tutorials/65c816interrupts.html#toc:transparent
newirq	.(
	;phb
	;phd
	rep #%00110000
	.xl
	.al
	pha
	phy
	phx

	sep #%00110000
	.xs
	.as

#if VICCY_IRQ
	lda VICCY+2	; save VICCY index register so we can restore it
	pha

	lda #VCCY_IRQ_STAT
	sta VICCY
	lda #127
	sta VICCY+1	; clear rasterline interrupt
#else
	lda PIA1+PIA_PB	; clear VDRIVE interrupt
#endif

	lda VCOUNT	; vertical screen interrupt
	clc
	adc #1
	sta VCOUNT

        lda lock        ; check lock so we don't get into poll again on pause
	bmi nopoll

        dec
        sta lock	; lock
        
        lda #MAP_USB
        sta MAPREG

        jsr driver_poll

	jsr checkkbd_xs
	bcc nokey
	jsr key_pet
nokey
	lda #MAP_BAS
        sta MAPREG
        
unlock  
        lda lock
        inc
        sta lock
nopoll
#if VICCY_IRQ
	pla
	sta VICCY+2
#endif

	rep #%00110000
	.xl
	.al
	plx
	ply
	pla
	;pld
	;plb
	rti
	.)

; pause a given number of vertical scree
; in AC has number of frames (retraces) 
	.xs
	.as
pause   .(                              
	php
	lda #MAP_BAS
	sta MAPREG
	cli

        tax                             
        inx           ; full retraces, s
p0      lda VCOUNT                      
p1      cmp VCOUNT                      
        beq p1                          
        dex                             
        bne p0                          

	lda #MAP_USB
	sta MAPREG
	plp
        rts                             
        .)                              

printc2	.(
	tax		; actually overwrites modifiers in X
	php
	sei

	bcs stop

	;inc $8027

	lda #MAP_BAS
	sta MAPREG

	txa
	jsr key_usb
stop
	lda #MAP_USB
	sta MAPREG

	plp
	rts
	.)

.)

